A coroutine is a function that can run concurrently with other coroutines. These are designated in Python by async def.
Tasks are used to schedule coroutines concurrently.
This done "behind the scences" using an "event loop".
Whenever we call a coroutine f(), we must write out = await f()
When we write await f() within a function, the function execution is paused until f() is evaluated.
If, for instance, f() is running on a core #1, the event loop might allow another task to begin executing on core #2.
Once f() completes, the event loop may continue executing the function that called f() on core #1.
Some nice functions:

	asyncio.run(...) runs a single coroutine to the exclusion of other coroutines.
	asyncio.create(...) initiates a single coroutine to run concurrently with other coroutines.
	asyncio.gather(...) initiates mutliple coroutines to run concurrently with other coroutines.